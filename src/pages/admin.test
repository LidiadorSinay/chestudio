---
import { createSignal } from "solid-js";
import { useState, useEffect } from 'preact/hooks';

const fetchEntries = async () => {
  const response = await fetch('/api/entries');
  const data = await response.json();
  return data;
};

var entries: any = [];
let [titulo, settitulo] = createSignal("");
let [content, setContent] = createSignal("");
let [author, setAuthor] = createSignal("");
let [tags, setTags] = createSignal("");
let [editingEntry, setEditingEntry]: any = createSignal(null);

async function addEntry() {
  const newEntry = {
    titulo: titulo(),
    content: content(),
    author: author(),
    tags: tags().split(","),
  };
  const response: any = await fetch("http://localhost:3001/api/post", {
    method: "POST",
    body: JSON.stringify(newEntry),
  });
  const entry = await response.json();
  entries.push(entry);
  settitulo("");
  setContent("");
  setAuthor("");
  setTags("");
}

async function editEntry(entry) {
  settitulo(entry.titulo);
  setContent(entry.content);
  setAuthor(entry.author);
  setTags(entry.tags.join(","));
  setEditingEntry(entry);
}

async function updateEntry() {
  const updatedEntry = {
    titulo: titulo(),
    content: content(),
    author: author(),
    tags: tags().split(","),
  };
  const response = await fetch(
    `http://localhost:3001/api/entries/${editingEntry().id}`,
    {
      method: "PUT",
      body: JSON.stringify(updatedEntry),
    }
  );
  let entry = await response.json();
  entries = entries.map((e: any) => (e.id === entry.id ? entry : e));
  settitulo("");
  setContent("");
  setAuthor("");
  setTags("");
  setEditingEntry(null);
}

async function deleteEntry(id) {
  await fetch(`http://localhost:3001/api/entries/${id}`, {
    method: "DELETE",
  });
  entries = entries.filter((entry: any) => entry.id !== id);
}
---

<div>
  <h1>Admin Panel</h1>
  <form on:submit|preventDefault={editingEntry() ? updateEntry : addEntry}>
    <input type="text" placeholder="titulo" [value]={titulo} required />
    <textarea placeholder="Content" [value]={content} required></textarea>
    <input type="text" placeholder="Author" [value]={author} required />
    <input type="text" placeholder="Tags (comma separated)" [value]={tags} />
    <button type="submit">{editingEntry() ? "Update Entry" : "Add Entry"}</button>
  </form>

  Entries:
  <ul>
    {
      entries && entries.map((entry: any) => (
        <li>
          <h2>{entry.titulo}</h2>
          <h2>{entry.subtitulo}</h2>
          <p>{entry.contenido}</p>
          <p>
            <strong>Autor:</strong> {entry.author}
          </p>
          <p>
            <strong>Tags:</strong> {entry.tags.join(", ")}
          </p>
          <button on-click={() => editEntry(entry)}>Edit</button>
          <button on-click={() => deleteEntry(entry.id)}>Delete</button>
        </li>
      ))
    }
  </ul>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('tokenChestudio');
    console.log("token: ", token);
    if (!token) {
      window.location.href = '/login';
    }

    const response = await fetch("http://localhost:3001/posts", {
      headers: { Authorization: `Bearer ${token}` },
    });
    if (response.ok) {
      entries = await response.json();
      console.log(entries);
    }
    });
</script>

<h1>Entradas del Blog</h1>

<script is:inline>
  const EntryList = () => {
    const [entries, setEntries] = useState([]);

    useEffect(() => {
      const loadEntries = async () => {
        const data = await fetchEntries();
        setEntries(data);
      };
      
      loadEntries();
    }, []);

    if (entries.length === 0) {
      return <p>No hay entradas disponibles.</p>;
    }

    return (
      <ul>
        {entries.map((entry) => (
          <li key={entry.id}>{entry.title}</li>
        ))}
      </ul>
    );
  };
</script>
