---
import '../style/carrusel.css';
import data from '../../public/data/carrusel.json';
import Link from '@components/ui/link.astro';

// Serializamos para pasar como atributo data al HTML
const dataJSON = JSON.stringify(data);
let currentIndex = 0; // Para el render inicial
const current = data[currentIndex];
---

<div class="main-container" id="main-container" data-carrusel={dataJSON}>
  <!-- Fondos superpuestos -->
  <div id="bg-prev" class="background-layer" style={`background-image: linear-gradient(180deg, #002d4255, #002d42), url('${current.fondo}')`}></div>
  <div id="bg-next" class="background-layer"></div>

  <!-- Contenido -->
  <div class="content" id="content">
    <h1 id="slide-title">{current.titulo}</h1>
    <h2
      id="slide-subtitle"
      class="subtitle"
      style={current.subtitulo ? '' : 'display:none'}
    >
      {current.subtitulo}
    </h2>
    <p id="slide-bajada" style={current.bajada ? '' : 'display:none'}>
      {current.bajada}
    </p>
    <Link
      id="slide-button"
      href={current.botonLink}
      target="_blank"
      rel="noopener noreferrer"
      class="pill uppercase"
    >
      {current.botonTexto}
    </Link>
  </div>

  <div class="carousel-controls">
    <button id="prev-btn" aria-label="Previous Slide">&#10094;</button>

    <div class="indicators" id="indicators">
      <!-- Circulos generados por JS -->
    </div>

    <button id="next-btn" aria-label="Next Slide">&#10095;</button>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("main-container");
    const data = JSON.parse(container.getAttribute("data-carrusel"));

    const bgPrev = document.getElementById("bg-prev");
    const bgNext = document.getElementById("bg-next");
    const content = document.getElementById("content");
    const titleEl = document.getElementById("slide-title");
    const subtitleEl = document.getElementById("slide-subtitle");
    const bajadaEl = document.getElementById("slide-bajada");
    const buttonEl = document.getElementById("slide-button");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const indicatorsContainer = document.getElementById("indicators");

    let currentIndex = 0;
    const totalSlides = data.length;
    let isAnimating = false;
    let autoChange = true;

    // Crear puntos indicadores
    for (let i = 0; i < totalSlides; i++) {
      const dot = document.createElement("div");
      dot.classList.add("dot");
      if (i === currentIndex) dot.classList.add("active");
      indicatorsContainer.appendChild(dot);
    }

    function updateIndicators(index) {
      const dots = indicatorsContainer.querySelectorAll(".dot");
      dots.forEach((dot, i) => {
        dot.classList.toggle("active", i === index);
      });
    }

    bgPrev.style.opacity = "1";
    bgNext.style.opacity = "0";

    function setContent(index) {
      const current = data[index];

      titleEl.textContent = current.titulo;

      if (current.subtitulo && current.subtitulo.trim() !== "") {
        subtitleEl.style.display = "block";
        subtitleEl.textContent = current.subtitulo;
      } else {
        subtitleEl.style.display = "none";
        subtitleEl.textContent = "";
      }

      if (current.bajada && current.bajada.trim() !== "") {
        bajadaEl.style.display = "block";
        bajadaEl.textContent = current.bajada;
      } else {
        bajadaEl.style.display = "none";
        bajadaEl.textContent = "";
      }

      // Actualizamos Link (recordá que Link renderiza a <a>, así que manipulamos sus props)
      buttonEl.href = current.botonLink;
      buttonEl.textContent = current.botonTexto;
    }

    function animateChange(newIndex) {
      if (isAnimating || newIndex === currentIndex) return;
      isAnimating = true;

      content.classList.add("slide-out");

      content.addEventListener("animationend", () => {
        content.classList.remove("slide-out");
        setContent(newIndex);

        bgNext.style.backgroundImage = `linear-gradient(180deg, #002d4255, #002d42), url('${data[newIndex].fondo}')`;

        bgPrev.style.transition = "opacity 0.8s ease-in-out";
        bgNext.style.transition = "opacity 0.8s ease-in-out";

        bgPrev.style.opacity = "0";
        bgNext.style.opacity = "1";

        content.classList.add("slide-in");

        content.addEventListener(
          "animationend",
          () => {
            content.classList.remove("slide-in");

            // Intercambiamos el fondo activo
            bgPrev.style.backgroundImage = bgNext.style.backgroundImage;
            bgPrev.style.opacity = "1";
            bgNext.style.opacity = "0";

            currentIndex = newIndex;
            updateIndicators(currentIndex);

            isAnimating = false;
          },
          { once: true }
        );
      }, { once: true });
    }

    setContent(currentIndex);

    function userInteracted() {
      autoChange = false;
    }

    prevBtn.addEventListener("click", () => {
      userInteracted();
      const newIndex = (currentIndex - 1 + totalSlides) % totalSlides;
      animateChange(newIndex);
    });

    nextBtn.addEventListener("click", () => {
      userInteracted();
      const newIndex = (currentIndex + 1) % totalSlides;
      animateChange(newIndex);
    });

    setInterval(() => {
      if (autoChange) {
        const newIndex = (currentIndex + 1) % totalSlides;
        animateChange(newIndex);
      }
    }, 4000);
  });
</script>
